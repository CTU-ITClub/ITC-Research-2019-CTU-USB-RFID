import ISpreadsheet = require("./interfaces/ISpreadsheet");

import Cluster = require("./Cluster");
import Collection = require("./Collection");
import Message = require("./Message");

/** Database class */
class Database {
  /** Cluster > Database */
  public cluster: Cluster;

  /** Database = Spreadsheet */
  public spreadsheet?: ISpreadsheet;

  /**
   * Create Database object
   * @param {Cluster} cluster Cluster of this Database
   * @param {ISpreadsheet} spreadsheet Spreadsheet
   */
  constructor(cluster: Cluster, spreadsheet?: ISpreadsheet) {
    /** Cluster of this Database */
    this.cluster = cluster;

    if (spreadsheet) {
      /** Spreadsheet */
      this.spreadsheet = spreadsheet;
    }
  }

  /**
   * Access to Collection
   * @param {Collection} collection Name collection
   * @returns Collection object
   */
  public collection(collection: string): Collection {
    if (this.spreadsheet) {
      const sheet = this.spreadsheet.worksheets.filter(sheet => sheet.title == collection)[0];
      if (sheet) {
        return new Collection(this, sheet);
      } else {
        Message.error("Access collection failed.", "Name collection not found.", "Check name collection again.");
        return new Collection(this);
      }
    } else {
      Message.error("Access collection failed.", "Spreadsheet undefined.", "Access database first.");
      return new Collection(this);
    }
  }
}

export = Database;
