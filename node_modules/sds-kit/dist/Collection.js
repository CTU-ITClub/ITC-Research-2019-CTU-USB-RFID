"use strict";
const util = require("util");
const Document = require("./Document");
const Message = require("./Message");
/** Collection class */
class Collection {
    /**
     * Create Collection object
     * @param {Database} database Database of this Collection
     * @param {ISheet} sheet Sheet
     */
    constructor(database, sheet) {
        /** Database of this Collection */
        this.database = database;
        if (sheet) {
            /** Sheet */
            this.sheet = sheet;
        }
    }
    /**
     * Select Documents
     * @param {IQuery} query
     * @returns Document objects array
     */
    async select(query) {
        const documents = new Array(new Document());
        documents.pop();
        if (this.database.spreadsheet) {
            if (this.sheet) {
                const rows = await util.promisify(this.sheet.getRows)(query);
                rows.forEach(row => documents.push(new Document(this, row)));
            }
            else {
                Message.error("Select Documents failed.", "Sheet undefined.", "Access collection first.");
            }
        }
        else {
            Message.error("Select Documents failed.", "Spreadsheet undefined.", "Access database first.");
        }
        return documents;
    }
    /**
     * Insert Document
     * @param {Object} document Inserted Document
     * @returns ID of inserted Document
     */
    async insert(document) {
        if (this.database.spreadsheet) {
            if (this.sheet) {
                const row = await util.promisify(this.sheet.addRow)(document);
                return row.id;
            }
            else {
                Message.error("Insert Document failed.", "Sheet undefined.", "Access collection first.");
            }
        }
        else {
            Message.error("Insert Document failed.", "Spreadsheet undefined.", "Access database first.");
        }
    }
    /**
     * Update Documents
     * @param {IQuery} query Select query
     * @param {Object} document Updated Document
     * @returns Number of updated Documents
     */
    async update(query, document) {
        if (this.database.spreadsheet) {
            if (this.sheet) {
                let updated = 0;
                const rows = await util.promisify(this.sheet.getRows)(query);
                rows.forEach(row => {
                    Object.assign(row, document);
                    row.save();
                    updated++;
                });
                await util.promisify(this.database.spreadsheet.getInfo)();
                return updated;
            }
            else {
                Message.error("Update Documents failed.", "Sheet undefined.", "Access collection first.");
            }
        }
        else {
            Message.error("Update Documents failed.", "Spreadsheet undefined.", "Access database first.");
        }
    }
    /**
     * Delete Documents
     * @param {IQuery} query Select query
     * @returns Number of deleted Documents
     */
    async delete(query) {
        if (this.database.spreadsheet) {
            if (this.sheet) {
                let deleted = 0;
                const rows = await util.promisify(this.sheet.getRows)(query);
                rows.forEach(row => {
                    row.del();
                    deleted++;
                });
                await util.promisify(this.database.spreadsheet.getInfo)();
                return deleted;
            }
            else {
                Message.error("Delete Documents failed.", "Sheet undefined.", "Access collection first.");
            }
        }
        else {
            Message.error("Delete Documents failed.", "Spreadsheet undefined.", "Access database first.");
        }
    }
}
module.exports = Collection;
